
//// POST-ORDER TRAVERSAL ->
/// 
/// This means:

//                  1. Traverse the left subtree

//                  2. Traverse the right subtree

//                  3. Visit the current node (root)

//
//class TreeNode{
//
//    int val;
//    TreeNode left;
//    TreeNode right;
//
//    public TreeNode(int val){
//        this.val = val;
//    }
//}
//
//public class Main{
//    public static void main(String[] args) {
//
//        TreeNode root = new TreeNode(10);
//        root.left = new TreeNode(5);
//        root.left.left = new TreeNode(2);
//        root.left.right = new TreeNode(7);
//        root.right = new TreeNode(15);
//        root.right.right = new TreeNode(20);
//
//        System.out.println("* Post-order Traversal : ");
//        postOrderTraversal(root);
//    }
//    static void postOrderTraversal(TreeNode root){
//
//        if(root == null) return;
//
//        postOrderTraversal(root.left);
//        postOrderTraversal(root.right);
//        System.out.print(root.val + " ");
//    }
//}