
//// DFS using Stack
//
//class DFS{
//
//    private int V;
//    private LinkedList<Integer>[] adj;
//
//    public DFS(int V){
//
//        this.V = V;
//        adj = new LinkedList[V];
//
//        for(int i = 0; i < V; i++){
//            adj[i] = new LinkedList<>();
//        }
//    }
//
//    void addEdge(int v, int w){
//        adj[v].add(w);
//    }
//
//    void DFS(int start){
//
//        boolean[] visited = new boolean[V];
//
//        Stack<Integer> stack = new Stack<>();
//
//        stack.push(start);
//
//        while(!stack.isEmpty()){
//            int curr = stack.pop();
//
//            if(!visited[curr]){
//                visited[curr] = true;
//                System.out.print(curr + " ");
//            }
//
//            for(int neighbour : adj[curr]){
//                if(!visited[neighbour]){
//                    stack.push(neighbour);
//                }
//            }
//        }
//    }
//}
//
//public class Main{
//    public static void main(String[] args) {
//
//        DFS obj = new DFS(6);
//
//        obj.addEdge(0,1);
//        obj.addEdge(0,2);
//        obj.addEdge(1,3);
//        obj.addEdge(1,4);
//        obj.addEdge(2,5);
//
//        System.out.println("DFS Traversal ->");
//
//        obj.DFS(0);
//    }
//}
